/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package coffee.ordering.system;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.PreparedStatement;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.sql.SQLException;

/**
 *
 * @author jayde
 */
public class AdminFrame extends javax.swing.JFrame {

    Connection con;
    
    public AdminFrame() {
        initComponents();
        usersInternalFrame.setVisible(false);
        orderInternalFrame.setVisible(false);
        
        String url="jdbc:MySQL://localhost:3306/java_user_database";
        String user="root";
        String pass="";
        try{
            con = DriverManager.getConnection(url,user,pass); // Assign to 'con'
        }catch(Exception ex){
            System.out.println("Error : " + ex.getMessage());
        }
        loadOrderSummary();
        loadAdminStats();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        usersInternalFrame = new javax.swing.JInternalFrame();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblUsers = new javax.swing.JTable();
        orderInternalFrame = new javax.swing.JInternalFrame();
        jScrollPane2 = new javax.swing.JScrollPane();
        orderTable = new javax.swing.JTable();
        LogoutBtn = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        orderSearch = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        order_status = new javax.swing.JTable();
        completeOrder = new javax.swing.JButton();
        deleteCompletedOrder = new javax.swing.JButton();
        cancelOrder = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        showTotalAccounts = new javax.swing.JLabel();
        showTotalOrders = new javax.swing.JLabel();
        showTotalSales = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        user = new javax.swing.JLabel();

        usersInternalFrame.setTitle("USERS");
        usersInternalFrame.setVisible(true);

        tblUsers.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "User ID", "First Name", "Last Name", "Email", "Username", "Password", "User Type"
            }
        ));
        jScrollPane1.setViewportView(tblUsers);

        javax.swing.GroupLayout usersInternalFrameLayout = new javax.swing.GroupLayout(usersInternalFrame.getContentPane());
        usersInternalFrame.getContentPane().setLayout(usersInternalFrameLayout);
        usersInternalFrameLayout.setHorizontalGroup(
            usersInternalFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, usersInternalFrameLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 606, Short.MAX_VALUE)
                .addContainerGap())
        );
        usersInternalFrameLayout.setVerticalGroup(
            usersInternalFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(usersInternalFrameLayout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 327, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 7, Short.MAX_VALUE))
        );

        orderInternalFrame.setTitle("Order Summary");
        orderInternalFrame.setVisible(true);

        orderTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Order", "Size", "Quantity", "Price"
            }
        ));
        jScrollPane2.setViewportView(orderTable);

        javax.swing.GroupLayout orderInternalFrameLayout = new javax.swing.GroupLayout(orderInternalFrame.getContentPane());
        orderInternalFrame.getContentPane().setLayout(orderInternalFrameLayout);
        orderInternalFrameLayout.setHorizontalGroup(
            orderInternalFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 578, Short.MAX_VALUE)
        );
        orderInternalFrameLayout.setVerticalGroup(
            orderInternalFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 384, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("ADMIN");
        setPreferredSize(new java.awt.Dimension(1100, 700));
        getContentPane().setLayout(null);

        LogoutBtn.setText("LOGOUT");
        LogoutBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LogoutBtnActionPerformed(evt);
            }
        });
        getContentPane().add(LogoutBtn);
        LogoutBtn.setBounds(32, 549, 77, 23);

        jButton1.setText("usersButton");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1);
        jButton1.setBounds(60, 270, 110, 23);

        orderSearch.setText("orderSearchButton");
        orderSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                orderSearchActionPerformed(evt);
            }
        });
        getContentPane().add(orderSearch);
        orderSearch.setBounds(50, 330, 130, 23);

        order_status.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "user_id", "full name", "payment type", "payment method", "address", "total", "city", "number", "status"
            }
        ));
        jScrollPane3.setViewportView(order_status);

        getContentPane().add(jScrollPane3);
        jScrollPane3.setBounds(190, 170, 610, 270);

        completeOrder.setText("completeOrder");
        completeOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                completeOrderActionPerformed(evt);
            }
        });
        getContentPane().add(completeOrder);
        completeOrder.setBounds(240, 490, 110, 23);

        deleteCompletedOrder.setText("deleteCompletedOrder");
        deleteCompletedOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteCompletedOrderActionPerformed(evt);
            }
        });
        getContentPane().add(deleteCompletedOrder);
        deleteCompletedOrder.setBounds(400, 490, 180, 23);

        cancelOrder.setText("cancelOrder");
        cancelOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelOrderActionPerformed(evt);
            }
        });
        getContentPane().add(cancelOrder);
        cancelOrder.setBounds(630, 490, 100, 23);

        jLabel1.setText("Total Orders");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(420, 50, 110, 16);

        jLabel2.setText("Total Accounts");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(270, 50, 110, 16);

        jLabel3.setText("Total Sales");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(560, 50, 100, 16);

        showTotalAccounts.setText("total");
        getContentPane().add(showTotalAccounts);
        showTotalAccounts.setBounds(280, 90, 70, 16);

        showTotalOrders.setText("total");
        getContentPane().add(showTotalOrders);
        showTotalOrders.setBounds(430, 90, 90, 16);

        showTotalSales.setText("total");
        getContentPane().add(showTotalSales);
        showTotalSales.setBounds(570, 90, 90, 16);

        jLabel4.setText("Welcome Admin!");
        getContentPane().add(jLabel4);
        jLabel4.setBounds(30, 60, 100, 16);

        user.setText("full name ");
        getContentPane().add(user);
        user.setBounds(70, 100, 90, 16);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void LogoutBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LogoutBtnActionPerformed
        int choice = JOptionPane.showConfirmDialog(
        this,
        "Are you sure you want to logout?",
        "Logout Confirmation",
        JOptionPane.YES_NO_OPTION
        );

        if (choice == JOptionPane.YES_OPTION) {
            Login loginFrame = new Login();
            loginFrame.setVisible(true);
            loginFrame.pack();
            loginFrame.setLocationRelativeTo(null);
            this.dispose();
        }
    }//GEN-LAST:event_LogoutBtnActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        usersInternalFrame.setVisible(!usersInternalFrame.isVisible());
        String sql= "SELECT * FROM user";
        try{
            PreparedStatement pst = con.prepareStatement(sql);
            ResultSet rs = pst.executeQuery();
            DefaultTableModel model = (DefaultTableModel)tblUsers.getModel();
            model.setRowCount(0);
            while(rs.next()) {
                model.addRow(new String[]{rs.getString(1),rs.getString(6), rs.getString(7), rs.getString(2), rs.getString(8), rs.getString(3), rs.getString(4)});
            }
        }catch(Exception e){
            System.out.println("Error : " +e.getMessage());
        }
   
    }//GEN-LAST:event_jButton1ActionPerformed
    private void loadAdminStats() {
        try {
            // TOTAL ACCOUNTS
            String sqlAccounts = "SELECT COUNT(*) AS total_accounts FROM user";
            PreparedStatement pstAccounts = con.prepareStatement(sqlAccounts);
            ResultSet rsAccounts = pstAccounts.executeQuery();
            if (rsAccounts.next()) {
                int totalAccounts = rsAccounts.getInt("total_accounts");
                showTotalAccounts.setText(String.valueOf(totalAccounts)); // <== your label
            }
            rsAccounts.close();
            pstAccounts.close();

            // TOTAL ORDERS (count DISTINCT user_ids in orders)
            String sqlOrders = "SELECT COUNT(DISTINCT user_id) AS total_orders FROM orders";
            PreparedStatement pstOrders = con.prepareStatement(sqlOrders);
            ResultSet rsOrders = pstOrders.executeQuery();
            if (rsOrders.next()) {
                int totalOrders = rsOrders.getInt("total_orders");
                showTotalOrders.setText(String.valueOf(totalOrders)); // <== your label
            }
            rsOrders.close();
            pstOrders.close();

            // TOTAL SALES
            String sqlSales = "SELECT SUM(total_amount) AS total_sales FROM order_summary";
            PreparedStatement pstSales = con.prepareStatement(sqlSales);
            ResultSet rsSales = pstSales.executeQuery();
            if (rsSales.next()) {
                double totalSales = rsSales.getDouble("total_sales");
                showTotalSales.setText("₱" + String.format("%.2f", totalSales)); // <== your label
            }
            rsSales.close();
            pstSales.close();

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error loading dashboard stats: " + e.getMessage());
        }
    }
    


    private void loadOrderSummary() {
        DefaultTableModel model = (DefaultTableModel) order_status.getModel();
        model.setRowCount(0); // clear existing rows

        String sql = "SELECT user_id, full_name, payment_method, payment_type, address, total_amount, city, phone_number, status FROM order_summary";

        try {
            PreparedStatement pst = con.prepareStatement(sql);
            ResultSet rs = pst.executeQuery();

            while (rs.next()) {
                Object[] row = {
                    rs.getInt("user_id"),
                    rs.getString("full_name"),
                    rs.getString("payment_method"),
                    rs.getString("payment_type"),
                    rs.getString("address"),
                    "₱" + String.format("%.2f", rs.getDouble("total_amount")),
                    rs.getString("city"),
                    rs.getString("phone_number"),
                    rs.getString("status")
                };
                model.addRow(row);
            }

            rs.close();
            pst.close();
        } catch (Exception e) {
            javax.swing.JOptionPane.showMessageDialog(this, "Error loading order summary: " + e.getMessage());
        }
    }
    private void orderSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_orderSearchActionPerformed

        String input = javax.swing.JOptionPane.showInputDialog(this, "Enter User ID:");
        if (input != null && !input.trim().isEmpty()) {
            try {
                int userId = Integer.parseInt(input.trim());
                String sql = "SELECT item_name, size, quantity, price FROM orders WHERE user_id = ?";
                PreparedStatement pst = con.prepareStatement(sql);
                pst.setInt(1, userId);
                ResultSet rs = pst.executeQuery();
                
                orderInternalFrame.setVisible(true);
                DefaultTableModel model = (DefaultTableModel) orderTable.getModel();
                model.setRowCount(0);
                
                
                boolean hasData = false;
                while (rs.next()) {
                    model.addRow(new Object[]{
                        rs.getString("item_name"),
                        rs.getString("size"),
                        rs.getInt("quantity"),
                        rs.getDouble("price")
                    });
                    hasData = true;
                }

                if (!hasData) {
                    javax.swing.JOptionPane.showMessageDialog(this, "No orders found for User ID: " + userId);
                }

                rs.close();
                pst.close();
            } catch (NumberFormatException ex) {
                javax.swing.JOptionPane.showMessageDialog(this, "Invalid User ID format.");
            } catch (Exception ex) {
                javax.swing.JOptionPane.showMessageDialog(this, "Error retrieving orders: " + ex.getMessage());
            }
        }
    }//GEN-LAST:event_orderSearchActionPerformed

    private void completeOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_completeOrderActionPerformed
        String input = JOptionPane.showInputDialog(this, "Enter the User ID for completed orders:");
        if (input == null || input.trim().isEmpty()) {
            return; // user cancelled or left it blank
        }

        int userId;

        try {
            userId = Integer.parseInt(input.trim());
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Invalid user ID. Please enter a number.");
            return;
        }

        int confirm = JOptionPane.showConfirmDialog(
            this,
            "Have you completed the order for User ID: " + userId + "?",
            "Confirm Completion",
            JOptionPane.YES_NO_OPTION
        );

        if (confirm != JOptionPane.YES_OPTION) {
            return;
        }

        try {
            String sql = "UPDATE order_summary SET status = 'Completed' WHERE user_id = ?";
            PreparedStatement pst = con.prepareStatement(sql);
            pst.setInt(1, userId);
            int updatedRows = pst.executeUpdate();

            if (updatedRows > 0) {
                JOptionPane.showMessageDialog(this, "Order(s) marked as completed.");
                loadOrderSummary(); // ✅ Refresh the table
            } else {
                JOptionPane.showMessageDialog(this, "No orders found for that user.");
            }

            pst.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Database error: " + e.getMessage());
        }
    }//GEN-LAST:event_completeOrderActionPerformed

    private void deleteCompletedOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteCompletedOrderActionPerformed
        String input = JOptionPane.showInputDialog(this, "Enter the User ID to delete completed order:");

        if (input == null || input.trim().isEmpty()) {
            return; // User cancelled or empty input
        }

        int userId;
        try {
            userId = Integer.parseInt(input.trim());
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Invalid user ID. Please enter a number.");
            return;
        }

        int confirm = JOptionPane.showConfirmDialog(
            this,
            "Do you want to delete the completed order for User ID: " + userId + "?",
            "Confirm Deletion",
            JOptionPane.YES_NO_OPTION
        );

        if (confirm != JOptionPane.YES_OPTION) {
            return;
        }

        try {
            // First check if the order exists and is completed
            String checkSql = "SELECT status FROM order_summary WHERE user_id = ?";
            PreparedStatement checkPst = con.prepareStatement(checkSql);
            checkPst.setInt(1, userId);
            ResultSet rs = checkPst.executeQuery();

            if (rs.next()) {
                String status = rs.getString("status");
                if ("Completed".equalsIgnoreCase(status)) {
                    // Delete the order
                    String deleteSql = "DELETE FROM order_summary WHERE user_id = ?";
                    PreparedStatement deletePst = con.prepareStatement(deleteSql);
                    deletePst.setInt(1, userId);
                    deletePst.executeUpdate();
                    deletePst.close();

                    JOptionPane.showMessageDialog(this, "Completed order for user ID " + userId + " has been deleted.");
                    loadOrderSummary(); // Refresh table
                } else {
                    JOptionPane.showMessageDialog(this, "Order status is not 'Completed'. Cannot delete.");
                }
            } else {
                JOptionPane.showMessageDialog(this, "No order found for that user ID.");
            }

            rs.close();
            checkPst.close();

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Database error: " + e.getMessage());
        }
    }//GEN-LAST:event_deleteCompletedOrderActionPerformed

    private void cancelOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelOrderActionPerformed
        String input = JOptionPane.showInputDialog(this, "Enter the User ID to cancel the order:");

        if (input == null || input.trim().isEmpty()) {
            return; // User cancelled or empty input
        }

        int userId;
        try {
            userId = Integer.parseInt(input.trim());
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Invalid user ID. Please enter a number.");
            return;
        }

        int confirm = JOptionPane.showConfirmDialog(
            this,
            "Are you sure you want to cancel the order for User ID: " + userId + "?",
            "Confirm Cancellation",
            JOptionPane.YES_NO_OPTION
        );

        if (confirm != JOptionPane.YES_OPTION) {
            return;
        }

        try {
            // First check if an order exists
            String checkSql = "SELECT * FROM order_summary WHERE user_id = ?";
            PreparedStatement checkPst = con.prepareStatement(checkSql);
            checkPst.setInt(1, userId);
            ResultSet rs = checkPst.executeQuery();

            if (rs.next()) {
                // Delete from order_summary
                String deleteSummarySql = "DELETE FROM order_summary WHERE user_id = ?";
                PreparedStatement deleteSummaryPst = con.prepareStatement(deleteSummarySql);
                deleteSummaryPst.setInt(1, userId);
                deleteSummaryPst.executeUpdate();
                deleteSummaryPst.close();

                // Optional: Also delete from orders table
                String deleteOrdersSql = "DELETE FROM orders WHERE user_id = ?";
                PreparedStatement deleteOrdersPst = con.prepareStatement(deleteOrdersSql);
                deleteOrdersPst.setInt(1, userId);
                deleteOrdersPst.executeUpdate();
                deleteOrdersPst.close();

                JOptionPane.showMessageDialog(this, "Order for user ID " + userId + " has been cancelled.");
                loadOrderSummary(); // Refresh table

            } else {
                JOptionPane.showMessageDialog(this, "No order found for that user ID.");
            }

            rs.close();
            checkPst.close();

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Database error: " + e.getMessage());
        }
    }//GEN-LAST:event_cancelOrderActionPerformed
    
    
    public void setUser(String name){
        user.setText(name);
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AdminFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AdminFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AdminFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AdminFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AdminFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton LogoutBtn;
    private javax.swing.JButton cancelOrder;
    private javax.swing.JButton completeOrder;
    private javax.swing.JButton deleteCompletedOrder;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JInternalFrame orderInternalFrame;
    private javax.swing.JButton orderSearch;
    private javax.swing.JTable orderTable;
    private javax.swing.JTable order_status;
    private javax.swing.JLabel showTotalAccounts;
    private javax.swing.JLabel showTotalOrders;
    private javax.swing.JLabel showTotalSales;
    private javax.swing.JTable tblUsers;
    private javax.swing.JLabel user;
    private javax.swing.JInternalFrame usersInternalFrame;
    // End of variables declaration//GEN-END:variables
}
